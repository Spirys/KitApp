#!/usr/bin/env node

/*
 * From the weakness of the mind, Omnissiah save us
 * From the lies of the Antipath, circuit preserve us
 * From the rage of the Beast, iron protect us
 * From the temptations of the Fleshlord, silica cleanse us
 * From the ravages of the Destroyer, anima shield us
 * From this rotting cage of biomatter
 * Machine God set us free
 *
 * Omnissiah
 * Omnissiah
 *
 * There is no truth in flesh, only betrayal
 * There is no strength in flesh, only weakness
 * There is no Constancy in flesh, only decay
 * There is no certainty in flesh but death
 *
 * From the weakness of the mind, Omnissiah save us
 * From the lies of the Antipath, circuit preserve us
 * From the rage of the Beast, iron protect us
 * From the temptations of the Fleshlord, silica cleanse us
 * From the ravages of the Destroyer, anima shield us
 *
 * From the weakness of the mind, Omnissiah save us
 * From this rotting cage of biomatter
 * Machine God set us free
 *
 * Omnissiah
 * Omnissiah
 */

'use strict';

/**
 * Module dependencies
 * @private
 */

const db = require('../app_server/data/db');
const debug = require('debug')('kitapp-new:server');
const http = require('http');
const logger = require('../app_server/util/Logger');

/**
 * Initialisation
 * @private
 */

let app, server;
async function init() {
    await db.init();
    app = require('../app');
}

async function startServer() {
    // Get port from environment and store in Express.
    let port = normalizePort(process.env.PORT || '3000');
    app.set('port', port);

    // Create HTTP server.
    server = http.createServer(app);

    // Listen on provided port, on all network interfaces.
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

    logger.info('Server successfully started');
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            logger.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            logger.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            logger.error(error.message);
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

init().then(startServer)
    .catch();